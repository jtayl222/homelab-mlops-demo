apiVersion: v1
data:
  Dockerfile: |-
    FROM python:3.12-slim

    WORKDIR /app
    COPY requirements.txt .

    # Install dependencies directly
    RUN pip install -r requirements.txt

    # Copy application files
    COPY serve.py .
    COPY model/ /model/

    # Set environment variables
    ENV PYTHONUNBUFFERED=1
    ENV GIT_PYTHON_REFRESH=quiet

    # Run the server
    CMD ["python", "serve.py"]
  requirements.txt: |
    scikit-learn==1.4.2
    mlflow==2.12.1
    fastapi==0.110.0
    uvicorn[standard]==0.29.0
    boto3==1.37.34
  serve.py: |
    import pickle, os
    from fastapi import FastAPI
    import numpy as np
    import uvicorn

    model_path = os.getenv("MODEL_PATH", "/model/model.pkl")
    with open(model_path, "rb") as f:
        model = pickle.load(f)

    app = FastAPI()

    @app.post("/predict")
    def predict(payload: dict):
        data = np.array(payload["instances"])
        preds = model.predict(data).tolist()
        return {"predictions": preds}

    @app.get("/health")
    async def health():
        return {"status": "healthy"}

    @app.get("/")
    async def root():
        return {"message": "Iris classifier is running"}

    if __name__ == "__main__":
        uvicorn.run(app, host="0.0.0.0", port=8080)
  train.py: "import mlflow, os, pickle, json\nfrom sklearn.datasets import load_iris\nfrom
    sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import
    RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nmlflow.set_tracking_uri(os.environ[\"MLFLOW_TRACKING_URI\"])\nmlflow.set_experiment(\"iris_demo\")\n\nwith
    mlflow.start_run():\n    X, y = load_iris(return_X_y=True)\n    X_tr, X_te, y_tr,
    y_te = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    n_estimators
    = int(os.getenv(\"N_ESTIMATORS\", 100))\n    clf = RandomForestClassifier(n_estimators=n_estimators,
    random_state=42)\n    clf.fit(X_tr, y_tr)\n\n    acc = accuracy_score(y_te, clf.predict(X_te))\n
    \   mlflow.log_param(\"n_estimators\", n_estimators)\n    mlflow.log_metric(\"accuracy\",
    acc)\n\n    # Save model to /output/model/ (not /tmp/model/)\n    os.makedirs(\"/output/model\",
    exist_ok=True)\n    model_path = \"/output/model/model.pkl\"\n    print(f\"Saving
    model to {model_path}\")\n    with open(model_path, \"wb\") as f:\n        pickle.dump(clf,
    f)\n    mlflow.log_artifacts(\"/output/model\")\n\n    # Write run info\n    run_id
    = mlflow.active_run().info.run_id\n    with open(\"/output/run_info.json\", \"w\")
    as f:\n        json.dump({\"run_id\": run_id}, f)\n    \n    print(\"Training
    complete with accuracy:\", acc)\n"
kind: ConfigMap
metadata:
  name: iris-src
  namespace: argowf
